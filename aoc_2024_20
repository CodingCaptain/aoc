package org.example;

import java.io.IOException;
import java.util.*;

public class Main {

  public static void main(String[] args) throws IOException {
    List<String> lines = Tools.getLines("2024_20");
    lines = Tools.getLines("2024_20_test");
    char[][] grid = new char[lines.size()][lines.get(0).length()];

    Map<Integer, Integer> distanceMap = new HashMap<>();

    int bestDistances = 0;

    for (int y = 0; y < lines.size(); y++) {
      for (int x = 0; x < lines.get(y).length(); x++) {
        grid[y][x] = lines.get(y).charAt(x);
      }
    }

    int startY = -1, startX = -1, endY = -1, endX = -1;
    for (int y = 0; y < lines.size(); y++) {
      for (int x = 0; x < lines.get(y).length(); x++) {
        if (grid[y][x] == 'S') {
          startY = y;
          startX = x;
        } else if (grid[y][x] == 'E') {
          endY = y;
          endX = x;
        }
      }
    }

    int longestDistance = find(grid, startY, startX, endY, endX);
    int minDistance = Integer.MAX_VALUE;

    for (int yOuter = 0; yOuter < lines.size(); yOuter++) {
      for (int xOuter = 0; xOuter < lines.get(yOuter).length(); xOuter++) {

        for (int y = 0; y < lines.size(); y++) {
          for (int x = 0; x < lines.get(y).length(); x++) {
            grid[y][x] = lines.get(y).charAt(x);
          }
        }

        if (startY == -1 || startX == -1 || endY == -1 || endX == -1) {
          System.out.println("ERROR");
          return;
        }

        if (grid[yOuter][xOuter] == '#')
          grid[yOuter][xOuter] = '.';
        else
          continue;

        int shortestDistance = find(grid, startY, startX, endY, endX);
//        if (shortestDistance == -1) {
//          System.out.println("ERROR");
//        } else {
//          System.out.println("SHORTEST DISTANCE: " + shortestDistance);
//        }

        if (shortestDistance < minDistance) {
          minDistance = shortestDistance;
        }
        if (shortestDistance < longestDistance) {
          if (distanceMap.containsKey(shortestDistance)) {
            distanceMap.put(shortestDistance, distanceMap.get(shortestDistance) + 1);
          } else {
            distanceMap.put(shortestDistance, 1);
          }

          if (shortestDistance <= longestDistance - 100) {
            bestDistances++;
          }
        }

/*        for (int y = 0; y < grid.length; y++) {
          for (int x = 0; x < grid[y].length; x++) {
            System.out.printf("%c", grid[y][x]);
          }
          System.out.println();
        }
        System.out.println();*/
      }
    }

    System.out.println("SHORTEST DISTANCE GLOBAL: " + minDistance);
    List<Integer> keys = new ArrayList<>(distanceMap.keySet());
    keys.sort(Comparator.reverseOrder());
    keys.forEach(key -> System.out.println("There is " + distanceMap.get(key) + " cheat(s) that save(s) " + key + " picoseconds."));

    System.out.println("bestDistances: " + bestDistances);
  }

  private static int find(char[][] grid, int startY, int startX, int endY, int endX) {
    int rows = grid.length;
    int cols = grid[0].length;

    int[] dy = {0, 0, 1, -1};
    int[] dx = {1, -1, 0, 0};

    int[][] distance = new int[rows][cols];
    for (int[] row : distance) {
      Arrays.fill(row, Integer.MAX_VALUE);
    }

    PriorityQueue<Position> pq = new PriorityQueue<>();
    Position startPos = new Position(startY, startX, 0, null);
    pq.add(startPos);
    distance[startY][startX] = 0;

    Position endPos = null;

    while (!pq.isEmpty()) {
      Position current = pq.poll();

      if (current.y == endY && current.x == endX) {
        endPos = current;
        break;
      }

      // check neighbours
      for (int i = 0; i < 4; i++) {
        int newY = current.y + dy[i];
        int newX = current.x + dx[i];

        if (newY >= 0 && newY < rows && newX >= 0 && newX < cols) {
          if (grid[newY][newX] == '.' || grid[newY][newX] == 'E') {
            int newDist = current.distance + 1;

            if (newDist < distance[newY][newX]) {
              distance[newY][newX] = newDist;
              pq.add(new Position(newY, newX, newDist, current));
            }

          }
        }
      }
    }

    if (endPos == null) {
      return -1;
    }

    Position trace = endPos;
    while (trace.parent != null) {
      if (grid[trace.y][trace.x] != 'E') {
        grid[trace.y][trace.x] = 'â–ˆ';
      }

      trace = trace.parent;
    }

    return endPos.distance;
  }

  private static class Position implements Comparable<Position> {
    int y, x, distance;
    Position parent;

    public Position(int y, int x, int distance, Position parent) {
      this.y = y;
      this.x = x;
      this.distance = distance;
      this.parent = parent;
    }

    @Override
    public int compareTo(Position other) {
      return Integer.compare(this.distance, other.distance);
    }
  }
}
