import java.io.FileNotFoundException;
import java.util.List;

public class Day_2024_15 {

  private static Position[][] grid;

  public static void main(String[] args) throws FileNotFoundException {
    List<String> lines = Tools.getLines("2024_15");
//    lines = Tools.getLines("2024_15_test_01");
//    lines = Tools.getLines("2024_15_test_02");
//    lines = Tools.getLines("2024_15_test_03");

    int instructionCounter = 0;

    int maxY = 0;
    int maxX = 0;

    long sum = 0;

    Position startPosition = null;

    for (String line : lines) {
      if (line.isBlank())
        break;
      maxY++;
      maxX = line.length();
    }

    for (int y = maxY + 1; y < lines.size(); y++) {
      for (int x = 0; x < lines.get(y).length(); x++) {
        instructionCounter++;
      }
    }
    char[] instructions = new char[instructionCounter];

    int counter = 0;
    for (int y = maxY + 1; y < lines.size(); y++) {
      for (int x = 0; x < lines.get(y).length(); x++) {
        instructions[counter++] = lines.get(y).charAt(x);
      }
    }

    grid = new Position[maxY][maxX];
    for (int y = 0; y < maxY; y++) {
      String line = lines.get(y);
      for (int x = 0; x < line.length(); x++) {
        grid[y][x] = new Position(y, x, line.charAt(x));
        if (line.charAt(x) == '@') {
          startPosition = grid[y][x];
        }
      }
    }

    int y = startPosition.y;
    int x = startPosition.x;

    printGrid();


    for (char instruction : instructions) {
      switch (instruction) {
        case '^' -> {
          if (y > 1 && grid[y - 1][x].c == '.') {
            grid[y][x] = new Position(y, x, '.');
            startPosition.y--;
            y--;
            grid[y][x] = startPosition;
          } else if (y > 1 && grid[y-1][x].c == 'O') {
            // todo
            int packagesToMove = 0;
            int myY = y;
            while (y > 2 && grid[myY - 1][x].c != '.') {
              if (grid[myY - 1][x].c == '#') {
                packagesToMove = 0;
                break;
              }
              packagesToMove++;
              myY--;
            }
            if (packagesToMove > 0) {
              for (int i = y - 1 - packagesToMove; i <= y - 1; i++) {
                grid[i][x] = new Position(y, x, 'O');
                if (i == y - 1)
                  grid[i][x] = startPosition;

              }
              grid[y][x] = new Position(y, x, '.');
              startPosition.y--;
              y--;
            }
          }

        }
        case '>' -> {
          if (x < grid[0].length - 2 && grid[y][x + 1].c == '.') {
            grid[y][x] = new Position(y, x, '.');
            startPosition.x++;
            x++;
            grid[y][x] = startPosition;
          } else if (x < grid[0].length - 2 && grid[y][x + 1].c == 'O') {
            // todo
            int packagesToMove = 0;
            int myX = x;
            while (x < grid[0].length - 2 && grid[y][myX + 1].c != '.') {
              if (grid[y][myX + 1].c == '#') {
                packagesToMove = 0;
                break;
              }
              packagesToMove++;
              myX++;
            }
            if (packagesToMove > 0) {
              for (int i = x + 1 + packagesToMove; i >= x + 1; i--) {
                grid[y][i] = new Position(y, x, 'O');
                if (i == x + 1)
                  grid[y][i] = startPosition;

              }
              grid[y][x] = new Position(y, x, '.');
              startPosition.x++;
              x++;
            }
          }

        }
        case 'v' -> {
          if (y < grid.length - 2 && grid[y + 1][x].c == '.') {
            grid[y][x] = new Position(y, x, '.');
            startPosition.y++;
            y++;
            grid[y][x] = startPosition;

            // UNTEN

          } else if (y < grid.length - 2 && grid[y+1][x].c == 'O') {
            // todo
            int packagesToMove = 0;
            int myY = y;
            while (y < grid[0].length - 2 && grid[myY + 1][x].c != '.') {
              if (grid[myY+1][x].c == '#') {
                packagesToMove = 0;
                break;
              }
              packagesToMove++;
              myY++;
            }
            if (packagesToMove > 0) {
              for (int i = y + 1 + packagesToMove; i >= y + 1; i--) {
                grid[i][x] = new Position(y, x, 'O');
                if (i == y + 1)
                  grid[i][x] = startPosition;

              }
              grid[y][x] = new Position(y, x, '.');
              startPosition.y++;
              y++;
            }
          }




        }
        case '<' -> {
          if (x > 1 && grid[y][x - 1].c == '.') {
            grid[y][x] = new Position(y, x, '.');
            startPosition.x--;
            x--;
            grid[y][x] = startPosition;
          } else if (x > 1 && grid[y][x-1].c == 'O') {
            // todo
            int packagesToMove = 0;
            int myX = x;
            while (x > 2 && grid[y][myX - 1].c != '.') {
              if (grid[y][myX - 1].c == '#') {
                packagesToMove = 0;
                break;
              }
              packagesToMove++;
              myX--;
            }
            if (packagesToMove > 0) {
              for (int i = x - 1 - packagesToMove; i <= x - 1; i++) {
                grid[y][i] = new Position(y, x, 'O');
                if (i == x - 1)
                  grid[y][i] = startPosition;

              }
              grid[y][x] = new Position(y, x, '.');
              startPosition.x--;
              x--;
            }
          }

        }
      }
//      System.out.println(instruction);
//      printGrid();
//      System.out.println();


    }

    for (int y1 = 0; y1 < grid.length; y1++) {
      for (int x1 = 0; x1 < grid[0].length; x1++) {
        if(grid[y1][x1].c == 'O') {
          sum+=y1* 100L +x1;
        }
      }
    }
//    printGrid();

    System.out.println(sum);
  }

  private static void printGrid() {
    for (int y = 0; y < grid.length; y++) {
      for (int x = 0; x < grid[0].length; x++) {
        System.out.print(grid[y][x].c);
      }
      System.out.println();
    }
    System.out.println();
  }

  private static class Position {
    int y;
    int x;
    char c;

    public Position(int y, int x, char c) {
      this.y = y;
      this.x = x;
      this.c = c;
    }
  }
}
