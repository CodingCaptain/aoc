package org.example;

import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

public class Day_2024_15 {

    private static Position[][] grid;
    private static Position[][] wideGrid;
    private static List<Position> positionList;

    public static void main(String[] args) throws FileNotFoundException {
        List<String> lines = Tools.getLines("2024_15");
//    lines = Tools.getLines("2024_15_test_01");
        lines = Tools.getLines("2024_15_test_02");
//    lines = Tools.getLines("2024_15_test_04");
//    lines = Tools.getLines("2024_15_test_04_down_under");
//    lines = Tools.getLines("2024_15_test_05");
//    lines = Tools.getLines("2024_15_test_06");
//    lines = Tools.getLines("2024_15_test_06_down_under");

        int instructionCounter = 0;

        int maxY = 0;
        int maxX = 0;

        long sum = 0;

        Position startPosition = null;

        for (String line : lines) {
            if (line.isBlank())
                break;
            maxY++;
            maxX = line.length();
        }

        for (int y = maxY + 1; y < lines.size(); y++) {
            for (int x = 0; x < lines.get(y).length(); x++) {
                instructionCounter++;
            }
        }
        char[] instructions = new char[instructionCounter];

        int counter = 0;
        for (int y = maxY + 1; y < lines.size(); y++) {
            for (int x = 0; x < lines.get(y).length(); x++) {
                instructions[counter++] = lines.get(y).charAt(x);
            }
        }


        List<String> wideLines = new ArrayList<>();
        for (String line : lines) {
            String wideLine = "";
            for (int i = 0; i < line.length(); i++) {
                if (line.charAt(i) == '#')
                    wideLine += "##";
                else if (line.charAt(i) == 'O') {
                    wideLine += "[]";
                } else if (line.charAt(i) == '.') {
                    wideLine += "..";
                } else if (line.charAt(i) == '@') {
                    wideLine += "@.";
                }
            }
            wideLines.add(wideLine);
        }


        positionList = new ArrayList<>();
        wideGrid = new Position[maxY][maxX * 2];

        for (int y = 0; y < wideLines.size(); y++) {
            String wideLine = wideLines.get(y);
            for (int x = 0; x < wideLine.length(); x++) {
                wideGrid[y][x] = new Position(y, x, wideLine.charAt(x));
                if (wideLine.charAt(x) == '@') {
                    startPosition = wideGrid[y][x];
                }
//                if (wideLine.charAt(x) == '@') {
//                    startPosition = new Position(y, x, wideLine.charAt(x));
//                    positionList.add(startPosition);
//                } else {
//                    positionList.add(new Position(y, x, wideLine.charAt(x)));
//                }
            }
        }

//        for (int theY = 0; theY < maxY; theY++) {
//            for (int theX = 0; theX < maxX * 2; theX++) {
//                int finalTheY = theY;
//                int finalTheX = theX;
//                System.out.printf(String.valueOf(positionList.stream().filter(p -> p.y == finalTheY && p.x == finalTheX).findFirst().get().c));
//            }
//            System.out.println();
//        }
//        System.out.println();


        int y = startPosition.y;
        int x = startPosition.x;

        printGrid(wideGrid);


        for (char instruction : instructions) {

            System.out.println(instruction);
            int finalX1 = x;
            switch (instruction) {
                case '^' -> {
                    if (y > 1 && wideGrid[y - 1][x].c == '.') {
                        wideGrid[y][x] = new Position(y, x, '.');
                        startPosition.y--;
                        y--;
                        wideGrid[y][x] = startPosition;
                    } else if (y > 1 && (wideGrid[y - 1][x].c == ']' || wideGrid[y - 1][x].c == '[')) {
                        List<String> packagesToMoveList = new ArrayList<>();
                        int shiftYCounter = 0;
                        int rangeX = 0;

                        // todo setze den ersten Block, den man verschiebt und daran die ranges
                        int rangeXNegative = 0;
                        int rangeXPositive = 0;

                        if (wideGrid[y - 1][x].c == ']') {
                            rangeXPositive = x;
                            rangeXNegative = x - 1;
                        } else if (wideGrid[y - 1][x].c == '[') {
                            rangeXPositive = x + 1;
                            rangeXNegative = x;
                        }
                        // die erhöht sich mit jedem shiftYCounter... aber vllt. -1 am Ende

                        if(rangeXNegative>=0 && rangeXPositive <= wideGrid[0].length - 1) {
                            while (true) {

                                // todo: (y) die while-Schleife unterhalb durch for-Schleife mit ranges ersetzen
                                // todo: (n) nur Kisten einsammeln!
                                // todo: man muss vor dem Verschieben bei jeder Position sicherstellen, dass y-1 kein # ist
                                // todo: ANSONSTEN DARF MAN NICHT VERSCHIEBEN!!!
                                //              while (wideGrid[y-1][myXPositive].c != '.') {
                                int packageSideCounter = 0;
                                for (int i = rangeXNegative; i <= rangeXPositive; i++) {


                                    // nicht dann aufhören, weil es auch einen Block dazwischen geben darf:
                                    //
                                    //   [][][][]     [][][][]
                                    //    []##[]      []  <>[]  die beiden <> werden nicht mitgeschoben
                                    //    []  []      []  <>[]
                                    //    [][][]       []   []
                                    //     [][]         [][][]
                                    //      []           [][]
                                    //                    []
                                    // man muss alles einsammeln und vor dem Verschieben jede Position prüfen, ob y-1 kein # ist

                                    // nur wenn sie selbst eine Kiste ist, wird sie eingesammelt und ...
                                    if (rangeXNegative >= 0 && rangeXPositive <= wideGrid[0].length - 1) {
                                        if (shiftYCounter == 0 || (wideGrid[y - 1 - shiftYCounter][i].c == '[' || wideGrid[y - 1 - shiftYCounter][i].c == ']')) {
                                            packageSideCounter++;
                                            // nur wenn über ihr eine Kiste steht, die sie schieben kann UND, die schon hinzugefügt wurde
                                            final int yMinusShiftCounter = y - shiftYCounter;
                                            int finalI = i;
                                            if (shiftYCounter == 0 ||
                                                    //                     ((wideGrid[y - 1 - shiftYCounter][i].c == '[' && ((wideGrid[y - shiftYCounter][i].c == '[' || wideGrid[y - shiftYCounter][i].c == ']') || (wideGrid[y - shiftYCounter][i+1].c == '[' || wideGrid[y - shiftYCounter][i+1].c == ']') ))
                                                    //                   || (wideGrid[y - 1 - shiftYCounter][i].c == ']' && ((wideGrid[y - shiftYCounter][i].c == '[' || wideGrid[y - shiftYCounter][i].c == ']') || (wideGrid[y - shiftYCounter][i-1].c == '[' || wideGrid[y - shiftYCounter][i-1].c == ']') )))) {
                                                    ((wideGrid[y - 1 - shiftYCounter][i].c == '[' && ((packagesToMoveList.stream().anyMatch(s -> Integer.parseInt(s.split("-")[0]) == yMinusShiftCounter && Integer.parseInt(s.split("-")[1]) == finalI) || (packagesToMoveList.stream().anyMatch(s -> Integer.parseInt(s.split("-")[0]) == yMinusShiftCounter && Integer.parseInt(s.split("-")[1]) == finalI + 1)))))
                                                            || (wideGrid[y - 1 - shiftYCounter][i].c == ']' && ((packagesToMoveList.stream().anyMatch(s -> Integer.parseInt(s.split("-")[0]) == yMinusShiftCounter && Integer.parseInt(s.split("-")[1]) == finalI) || (packagesToMoveList.stream().anyMatch(s -> Integer.parseInt(s.split("-")[0]) == yMinusShiftCounter && Integer.parseInt(s.split("-")[1]) == finalI - 1))))))) {
                                                packagesToMoveList.add(y - 1 - shiftYCounter + "-" + i);
                                            }
                                        }
                                    }
                                }

                                if (packageSideCounter == 0) {
                                    break;
                                }

                                shiftYCounter++;
                                rangeXPositive++;
                                rangeXNegative--;
                            }
                        }

                        printSelectedPackages(packagesToMoveList);

                        // allett einjesammelt
                        long allMoveablePackagesCount = packagesToMoveList.stream().distinct().filter(s1 -> {
                            int myY = Integer.parseInt(s1.split("-")[0]);
                            int myX = Integer.parseInt(s1.split("-")[1]);
                            return wideGrid[myY-1][myX].c == '.' || wideGrid[myY-1][myX].c == '[' || wideGrid[myY-1][myX].c == ']';
                        }).count();

                        if (packagesToMoveList.stream().distinct().count() == allMoveablePackagesCount) {
                            for (int theY = 0; theY < wideGrid.length; theY++) {
                                for (int theX = 0; theX < wideGrid[0].length; theX++) {
                                    for (String s : packagesToMoveList.stream().distinct().toList()) {

                                        String[] split = s.split("-");
                                        int myY1 = Integer.parseInt(split[0]);
                                        int myX1 = Integer.parseInt(split[1]);

                                        if (theY+1 == myY1 && theX == myX1) {
                                            wideGrid[myY1-1][myX1] = new Position(myY1-1, myX1, wideGrid[myY1][myX1].c);
                                            wideGrid[myY1][myX1] = new Position(myY1, myX1, '.');
//                      wideGrid[myY1+1][myX1] = new Position(myY1+1, myX1, wideGrid[myY1][myX1].c);
                                        }
                                    }
                                }
                            }
                            wideGrid[y][x] = new Position(y, x, '.');
                            startPosition.y--;
                            y--;
                            wideGrid[y][x] = startPosition;
                        }

//            printGrid(wideGrid);
//            System.out.println();

                    }

                }
                case '>' -> {
                    if (x < wideGrid[0].length - 2 && wideGrid[y][x + 1].c == '.') {
                        wideGrid[y][x] = new Position(y, x, '.');
                        startPosition.x++;
                        x++;
                        wideGrid[y][x] = startPosition;
                    } else if (x < wideGrid[0].length - 2 && wideGrid[y][x + 1].c == '[') {
                        // todo
                        int packagesToMove = 0;
                        int myX = x;
                        while (x < wideGrid[0].length - 2 && wideGrid[y][myX + 1].c != '.') {
                            if (wideGrid[y][myX + 1].c == '#') {
                                packagesToMove = 0;
                                break;
                            }
                            packagesToMove++;
                            myX++;
                        }
                        if (packagesToMove > 0) {
                            int packageMovCounter = 0;
                            for (int i = x + 1 + packagesToMove; i >= x + 1; i--) {
                                wideGrid[y][i] = new Position(y, x, packageMovCounter % 2 == 0 ? ']' : '[');
                                if (i == x + 1)
                                    wideGrid[y][i] = startPosition;
                                packageMovCounter++;

                            }
                            wideGrid[y][x] = new Position(y, x, '.');
                            startPosition.x++;
                            x++;
                        }
                    }

                }
                case 'v' -> {
                    if (y < wideGrid.length - 2 && wideGrid[y + 1][x].c == '.') {
                        wideGrid[y][x] = new Position(y, x, '.');
                        startPosition.y++;
                        y++;
                        wideGrid[y][x] = startPosition;

                        // UNTEN

                    } else if (y > 1 && (wideGrid[y + 1][x].c == ']' || wideGrid[y + 1][x].c == '[')) {
                        List<String> packagesToMoveList = new ArrayList<>();
                        int shiftYCounter = 0;
                        int rangeX = 0;

                        // todo setze den ersten Block, den man verschiebt und daran die ranges
                        int rangeXNegative = 0;
                        int rangeXPositive = 0;

                        if (wideGrid[y + 1][x].c == ']') {
                            rangeXPositive = x;
                            rangeXNegative = x - 1;
                        } else if (wideGrid[y + 1][x].c == '[') {
                            rangeXPositive = x + 1;
                            rangeXNegative = x;
                        }
                        // die erhöht sich mit jedem shiftYCounter... aber vllt. -1 am Ende

                        while (true) {
                            // todo: (y) die while-Schleife unterhalb durch for-Schleife mit ranges ersetzen
                            // todo: (n) nur Kisten einsammeln!
                            // todo: man muss vor dem Verschieben bei jeder Position sicherstellen, dass y-1 kein # ist
                            // todo: ANSONSTEN DARF MAN NICHT VERSCHIEBEN!!!
//              while (wideGrid[y-1][myXPositive].c != '.') {
                            int packageSideCounter = 0;
                            for (int i = rangeXNegative; i <= rangeXPositive; i++) {
                                // nur wenn sie selbst eine Kiste ist, wird sie eingesammelt und ...
                                if (shiftYCounter == 0 || (wideGrid[y + 1 + shiftYCounter][i].c == '[' || wideGrid[y + 1 + shiftYCounter][i].c == ']')) {
                                    packageSideCounter++;
                                    // nur wenn über ihr eine Kiste steht, die sie schieben kann UND, die schon hinzugefügt wurde
                                    final int yMinusShiftCounter = y + shiftYCounter;
                                    int finalI = i;
                                    if (shiftYCounter == 0 ||
//                     ((wideGrid[y - 1 - shiftYCounter][i].c == '[' && ((wideGrid[y - shiftYCounter][i].c == '[' || wideGrid[y - shiftYCounter][i].c == ']') || (wideGrid[y - shiftYCounter][i+1].c == '[' || wideGrid[y - shiftYCounter][i+1].c == ']') ))
//                   || (wideGrid[y - 1 - shiftYCounter][i].c == ']' && ((wideGrid[y - shiftYCounter][i].c == '[' || wideGrid[y - shiftYCounter][i].c == ']') || (wideGrid[y - shiftYCounter][i-1].c == '[' || wideGrid[y - shiftYCounter][i-1].c == ']') )))) {
                                            ((wideGrid[y + 1 + shiftYCounter][i].c == '[' && ((packagesToMoveList.stream().anyMatch(s -> Integer.parseInt(s.split("-")[0]) == yMinusShiftCounter && Integer.parseInt(s.split("-")[1]) == finalI) || (packagesToMoveList.stream().anyMatch(s -> Integer.parseInt(s.split("-")[0]) == yMinusShiftCounter && Integer.parseInt(s.split("-")[1]) == finalI + 1)))))
                                                    || (wideGrid[y + 1 + shiftYCounter][i].c == ']' && ((packagesToMoveList.stream().anyMatch(s -> Integer.parseInt(s.split("-")[0]) == yMinusShiftCounter && Integer.parseInt(s.split("-")[1]) == finalI) || (packagesToMoveList.stream().anyMatch(s -> Integer.parseInt(s.split("-")[0]) == yMinusShiftCounter && Integer.parseInt(s.split("-")[1]) == finalI - 1))))))) {
                                        packagesToMoveList.add(y + 1 + shiftYCounter + "-" + i);
                                    }
                                }
                            }

                            if (packageSideCounter == 0) {
                                break;
                            }

                            shiftYCounter++;
                            rangeXPositive++;
                            rangeXNegative--;
                        }

                        printSelectedPackages(packagesToMoveList);

                        // allett einjesammelt
                        long allMoveablePackagesCount = packagesToMoveList.stream().distinct().filter(s1 -> {
                            int myY = Integer.parseInt(s1.split("-")[0]);
                            int myX = Integer.parseInt(s1.split("-")[1]);
                            return wideGrid[myY+1][myX].c == '.' || wideGrid[myY+1][myX].c == '[' || wideGrid[myY+1][myX].c == ']';
                        }).count();

                        if (packagesToMoveList.stream().distinct().count() == allMoveablePackagesCount) {
                            for (int theY = wideGrid.length - 1; theY >= 0; theY--) {
                                for (int theX = 0; theX < wideGrid[0].length; theX++) {
                                    for (String s : packagesToMoveList.stream().distinct().toList()) {

                                        String[] split = s.split("-");
                                        int myY1 = Integer.parseInt(split[0]);
                                        int myX1 = Integer.parseInt(split[1]);

                                        if (theY-1 == myY1 && theX == myX1) {
                                            wideGrid[myY1+1][myX1] = new Position(myY1+1, myX1, wideGrid[myY1][myX1].c);
                                            wideGrid[myY1][myX1] = new Position(myY1, myX1, '.');
//                      wideGrid[myY1+1][myX1] = new Position(myY1+1, myX1, wideGrid[myY1][myX1].c);
                                        }
                                    }
                                }
                            }
                            wideGrid[y][x] = new Position(y, x, '.');
                            startPosition.y++;
                            y++;
                            wideGrid[y][x] = startPosition;
                        }

//            printGrid(wideGrid);
//            System.out.println();

                    }



                }
                case '<' -> {
                    if (x > 1 && wideGrid[y][x - 1].c == '.') {
                        wideGrid[y][x] = new Position(y, x, '.');
                        startPosition.x--;
                        x--;
                        wideGrid[y][x] = startPosition;
                    } else if (x > 1 && wideGrid[y][x - 1].c == ']') {
                        // todo
                        int packagesToMove = 0;
                        int myX = x;
                        while (x > 2 && wideGrid[y][myX - 1].c != '.') {
                            if (wideGrid[y][myX - 1].c == '#') {
                                packagesToMove = 0;
                                break;
                            }
                            packagesToMove++;
                            myX--;
                        }
                        if (packagesToMove > 0) {
                            int packageMovCounter = 0;
                            for (int i = x - 1 - packagesToMove; i <= x - 1; i++) {
                                wideGrid[y][i] = new Position(y, x, packageMovCounter % 2 == 0 ? '[' : ']');
                                if (i == x - 1)
                                    wideGrid[y][i] = startPosition;
                                packageMovCounter++;
                            }
                            wideGrid[y][x] = new Position(y, x, '.');
                            startPosition.x--;
                            x--;
                        }
                    }

                }
            }
            printGrid(wideGrid);
            System.out.println();
        }


//        solvePartOne(maxY, maxX, lines, startPosition, instructions, sum);
    }

    private static void printSelectedPackages(List<String> packagesToMoveList) {
        for (int y1 = 0; y1 < wideGrid.length; y1++) {
            for (int x1 = 0; x1 < wideGrid[0].length; x1++) {
                int finalY = y1;
                int finalX = x1;
                String s1 = packagesToMoveList.stream().filter(s -> Integer.parseInt(s.split("-")[0]) == finalY && Integer.parseInt(s.split("-")[1]) == finalX).findFirst().orElse(null);
                if (s1 != null) {
                    String[] split = s1.split("-");
//                  System.out.printf(String.valueOf(wideGrid[Integer.parseInt(split[0])][Integer.parseInt(split[1])].c));
                    System.out.printf(String.valueOf('█'));
                } else {
                    System.out.printf(String.valueOf(wideGrid[y1][x1].c));
                }
            }
            System.out.println();
        }
    }

    private static Position getGridPos(final int y, final int x) {
        return positionList.stream().filter(p -> p.y == y && p.x == x).findFirst().get();
    }

    private static void solvePartOne(int maxY, int maxX, List<String> lines, Position startPosition, char[] instructions, long sum) {
        grid = new Position[maxY][maxX];
        for (int y = 0; y < maxY; y++) {
            String line = lines.get(y);
            for (int x = 0; x < line.length(); x++) {
                grid[y][x] = new Position(y, x, line.charAt(x));
                if (line.charAt(x) == '@') {
                    startPosition = grid[y][x];
                }
            }
        }

        int y = startPosition.y;
        int x = startPosition.x;

        printGrid();


        for (char instruction : instructions) {
            switch (instruction) {
                case '^' -> {
                    if (y > 1 && grid[y - 1][x].c == '.') {
                        grid[y][x] = new Position(y, x, '.');
                        startPosition.y--;
                        y--;
                        grid[y][x] = startPosition;
                    } else if (y > 1 && grid[y - 1][x].c == 'O') {
                        // todo
                        int packagesToMove = 0;
                        int myY = y;
                        while (y > 2 && grid[myY - 1][x].c != '.') {
                            if (grid[myY - 1][x].c == '#') {
                                packagesToMove = 0;
                                break;
                            }
                            packagesToMove++;
                            myY--;
                        }
                        if (packagesToMove > 0) {
                            for (int i = y - 1 - packagesToMove; i <= y - 1; i++) {
                                grid[i][x] = new Position(y, x, 'O');
                                if (i == y - 1)
                                    grid[i][x] = startPosition;

                            }
                            grid[y][x] = new Position(y, x, '.');
                            startPosition.y--;
                            y--;
                        }
                    }

                }
                case '>' -> {
                    if (x < grid[0].length - 2 && grid[y][x + 1].c == '.') {
                        grid[y][x] = new Position(y, x, '.');
                        startPosition.x++;
                        x++;
                        grid[y][x] = startPosition;
                    } else if (x < grid[0].length - 2 && grid[y][x + 1].c == 'O') {
                        // todo
                        int packagesToMove = 0;
                        int myX = x;
                        while (x < grid[0].length - 2 && grid[y][myX + 1].c != '.') {
                            if (grid[y][myX + 1].c == '#') {
                                packagesToMove = 0;
                                break;
                            }
                            packagesToMove++;
                            myX++;
                        }
                        if (packagesToMove > 0) {
                            for (int i = x + 1 + packagesToMove; i >= x + 1; i--) {
                                grid[y][i] = new Position(y, x, 'O');
                                if (i == x + 1)
                                    grid[y][i] = startPosition;

                            }
                            grid[y][x] = new Position(y, x, '.');
                            startPosition.x++;
                            x++;
                        }
                    }

                }
                case 'v' -> {
                    if (y < grid.length - 2 && grid[y + 1][x].c == '.') {
                        grid[y][x] = new Position(y, x, '.');
                        startPosition.y++;
                        y++;
                        grid[y][x] = startPosition;

                        // UNTEN

                    } else if (y < grid.length - 2 && grid[y + 1][x].c == 'O') {
                        // todo
                        int packagesToMove = 0;
                        int myY = y;
                        while (y < grid[0].length - 2 && grid[myY + 1][x].c != '.') {
                            if (grid[myY + 1][x].c == '#') {
                                packagesToMove = 0;
                                break;
                            }
                            packagesToMove++;
                            myY++;
                        }
                        if (packagesToMove > 0) {
                            for (int i = y + 1 + packagesToMove; i >= y + 1; i--) {
                                grid[i][x] = new Position(y, x, 'O');
                                if (i == y + 1)
                                    grid[i][x] = startPosition;

                            }
                            grid[y][x] = new Position(y, x, '.');
                            startPosition.y++;
                            y++;
                        }
                    }


                }
                case '<' -> {
                    if (x > 1 && grid[y][x - 1].c == '.') {
                        grid[y][x] = new Position(y, x, '.');
                        startPosition.x--;
                        x--;
                        grid[y][x] = startPosition;
                    } else if (x > 1 && grid[y][x - 1].c == 'O') {
                        // todo
                        int packagesToMove = 0;
                        int myX = x;
                        while (x > 2 && grid[y][myX - 1].c != '.') {
                            if (grid[y][myX - 1].c == '#') {
                                packagesToMove = 0;
                                break;
                            }
                            packagesToMove++;
                            myX--;
                        }
                        if (packagesToMove > 0) {
                            for (int i = x - 1 - packagesToMove; i <= x - 1; i++) {
                                grid[y][i] = new Position(y, x, 'O');
                                if (i == x - 1)
                                    grid[y][i] = startPosition;

                            }
                            grid[y][x] = new Position(y, x, '.');
                            startPosition.x--;
                            x--;
                        }
                    }

                }
            }
//      System.out.println(instruction);
//      printGrid();
//      System.out.println();


        }

        for (int y1 = 0; y1 < grid.length; y1++) {
            for (int x1 = 0; x1 < grid[0].length; x1++) {
                if (grid[y1][x1].c == 'O') {
                    sum += y1 * 100L + x1;
                }
            }
        }
//    printGrid();

        System.out.println(sum);
    }

    private static void printGrid(Position[][] grid1) {
        for (int y = -1; y < grid1.length; y++) {
            if (y == -1) {
                System.out.printf("  ");
                for (int x = 0; x < grid1[0].length; x++) {
                    System.out.printf(String.valueOf(x));
                }
                System.out.println();
            } else {
                for (int x = -1; x < grid1[0].length; x++) {
                    if (x == -1) {
                        System.out.print(y + " ");
                    } else {
                        System.out.print(grid1[y][x].c);
                    }
                }
                System.out.println();
            }
        }
        System.out.println();
    }

    private static void printGrid() {
        for (int y = 0; y < grid.length; y++) {
            for (int x = 0; x < grid[0].length; x++) {
                System.out.print(grid[y][x].c);
            }
            System.out.println();
        }
        System.out.println();
    }

    private static class Position {
        int y;
        int x;
        char c;

        public Position(int y, int x, char c) {
            this.y = y;
            this.x = x;
            this.c = c;
        }
    }
}
